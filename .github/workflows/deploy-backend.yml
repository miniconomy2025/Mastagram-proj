name: Deploy Backend to EC2

on:
  pull_request:
    branches: [ main, master, fix-backend-deployment ]
    paths:
      - 'backend/**'
      - 'docker-compose.prod.yml'
      - 'scripts/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:
    inputs:
      ec2_ip:
        description: 'EC2 Instance IP Address'
        required: true
        type: string
      frontend_url:
        description: 'Frontend URL for CORS configuration'
        required: true
        type: string
        default: 'https://mastagram.co.za'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    env:
      EC2_IP: ${{ inputs.ec2_ip || '13.247.22.228' }} 
      FRONTEND_URL: ${{ inputs.frontend_url || 'https://d24gwdo6q6b8x9.cloudfront.net' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deployment-package
          
          # Copy Docker Compose configuration
          cp docker-compose.prod.yml deployment-package/
          
          # Copy deployment scripts
          mkdir -p deployment-package/scripts
          cp scripts/deploy.sh deployment-package/
          cp scripts/setup-ec2-env.sh deployment-package/scripts/
          chmod +x deployment-package/deploy.sh
          chmod +x deployment-package/scripts/setup-ec2-env.sh
          
          # Copy backend application files (Docker will handle build)
          cp -r backend deployment-package/
          
          # Create deployment archive
          tar -czf deployment-package.tar.gz -C deployment-package .

      - name: Configure SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Upload deployment package to EC2
        run: |
          scp -i ~/.ssh/id_rsa deployment-package.tar.gz ec2-user@${{ env.EC2_IP }}:/tmp/

      - name: Deploy to EC2 using Docker
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          ES_NODE_URL: ${{ secrets.ES_NODE_URL }}
          ES_API_KEY: ${{ secrets.ES_API_KEY }}
          FRONTEND_URL: ${{ env.FRONTEND_URL }}
          EC2_PUBLIC_IP: ${{ env.EC2_IP }}
          FEDERATION_ORIGIN: ${{ secrets.FEDERATION_ORIGIN }}
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} << EOF
            set -e
            
            # Navigate to application directory
            cd /home/ec2-user/mastagram
            
            # Extract deployment package
            tar -xzf /tmp/deployment-package.tar.gz
            
            # Set up environment variables for the setup script
            export GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID"
            export GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET"
            export GOOGLE_CALLBACK_URL="$GOOGLE_CALLBACK_URL"
            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            export ES_NODE_URL="$ES_NODE_URL"
            export ES_API_KEY="$ES_API_KEY"
            export FRONTEND_URL="$FRONTEND_URL"
            export FEDERATION_ORIGIN="$FEDERATION_ORIGIN"
            export EC2_PUBLIC_IP="$EC2_PUBLIC_IP"
            
            # Set up environment variables on EC2
            ./scripts/setup-ec2-env.sh
            
            # Run Docker deployment script
            ./deploy.sh
            
            # Clean up deployment package
            rm -f /tmp/deployment-package.tar.gz
            
            echo "Backend deployment completed successfully!"
          EOF

      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ env.EC2_IP }} << 'EOF'
            # Wait a moment for services to fully start
            sleep 10
            
            # Check Docker container status
            echo "=== Container Status ==="
            docker-compose -f docker-compose.prod.yml ps
            
            # Test backend health endpoint
            echo "=== Backend Health Check ==="
            if curl -f -s http://localhost:5000/health > /dev/null; then
              echo "✅ Backend health check passed"
            else
              echo "❌ Backend health check failed"
              exit 1
            fi
            
            # Show container logs (last 20 lines)
            echo "=== Recent Container Logs ==="
            docker-compose -f docker-compose.prod.yml logs --tail=20
          EOF

      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa